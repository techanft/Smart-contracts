{
  "address": "0x3DB3bfe4C326eEb74B7B9536419615C5D9Ebb9c3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "Message",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ae36b966b6e4067ad329c771b785a33cdcd7cae57d29c7321354a7c87f7e1b7",
  "receipt": {
    "to": null,
    "from": "0x0F488C370708b4250A253df57193df2ff731ca3D",
    "contractAddress": "0x3DB3bfe4C326eEb74B7B9536419615C5D9Ebb9c3",
    "transactionIndex": 124,
    "gasUsed": "156025",
    "logsBloom": "0x
    "blockHash": "0x20ec3b7c86c714558755cbecb3a83fe83a54db7b64ac59f7eed0844d26c238a5",
    "transactionHash": "0x1ae36b966b6e4067ad329c771b785a33cdcd7cae57d29c7321354a7c87f7e1b7",
    "logs": [],
    "blockNumber": 7876557,
    "cumulativeGasUsed": "24024840",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f9befe20cfa9c29ce93d955a70a4534e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"Message\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/Validation.sol\":\"Validation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/utils/Validation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Validation contract. User send a message to the contract. The contract emits an event with the message.\\n */\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Validation {\\n    event Message(address _sender, string _message);\\n    function sendMessage(string memory _message) public {\\n        emit Message(msg.sender, _message);\\n    }\\n}\",\"keccak256\":\"0xf6140dd3276ec8090c9b985033ad6a848fd2aceb9caaa39e12332e26a9a2b80f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506101dc806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063469c811014610030575b600080fd5b61004361003e366004610097565b610045565b005b7f811f7cff0a3374ff67cccc3726035d34ba70410e0256818a891e4d6acc01d88e3382604051610076929190610148565b60405180910390a150565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156100a957600080fd5b813567ffffffffffffffff808211156100c157600080fd5b818401915084601f8301126100d557600080fd5b8135818111156100e7576100e7610081565b604051601f8201601f19908116603f0116810190838211818310171561010f5761010f610081565b8160405282815287602084870101111561012857600080fd5b826020860160208301376000928101602001929092525095945050505050565b60018060a01b038316815260006020604081840152835180604085015260005b8181101561018457858101830151858201606001528201610168565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220ccb5498cbd06450c7cbf125211694e0cdf0b1414218ffa208926373f2db0d42564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063469c811014610030575b600080fd5b61004361003e366004610097565b610045565b005b7f811f7cff0a3374ff67cccc3726035d34ba70410e0256818a891e4d6acc01d88e3382604051610076929190610148565b60405180910390a150565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156100a957600080fd5b813567ffffffffffffffff808211156100c157600080fd5b818401915084601f8301126100d557600080fd5b8135818111156100e7576100e7610081565b604051601f8201601f19908116603f0116810190838211818310171561010f5761010f610081565b8160405282815287602084870101111561012857600080fd5b826020860160208301376000928101602001929092525095945050505050565b60018060a01b038316815260006020604081840152835180604085015260005b8181101561018457858101830151858201606001528201610168565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220ccb5498cbd06450c7cbf125211694e0cdf0b1414218ffa208926373f2db0d42564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}