{
  "language": "Solidity",
  "sources": {
    "contracts/v1/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\n\n/**\n * @dev This is a \"fork\" from OZ's ERC20Upgradeable.\n * The difference is the {_transfer} function returns a boolean\n * indicating whether the operation is sucessful\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        bool success = _transfer(_msgSender(), recipient, amount);\n        require(success, \"ERC20: unsuccessful transfer operation\");\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Returns a boolean indicatiing whether the operation is successful\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual returns (bool) {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n\n        return true;\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/v1/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./ERC20Upgradeable.sol\";\nimport \"./Listing.sol\";\n\ncontract Token is Initializable, ERC20Upgradeable, AccessControlUpgradeable, UUPSUpgradeable {\n\n    /**\n     * @dev Validators are authorized accounts to handle listing\n     */\n    bytes32 public constant VALIDATOR = keccak256(\"VALIDATOR\");\n\n    /**\n     * @dev Burners are authorized accounts to burn tokens from their own accounts\n     */\n    bytes32 public constant BURNER = keccak256(\"BURNER\");\n\n    /**\n     * @dev Minters are authorized accounts to mint tokens\n     */\n    bytes32 public constant MINTER = keccak256(\"MINTER\");\n\n    /**\n     * @dev The funds address for paying out rewards and receiving payments\n     */\n    address public stakingAddress;\n\n    /**\n     * @dev A listing address must be both `_isCreated` and `_active` to be able to operate.\n     * Otherwise malicious accounts can call handleListingTx functions\n     *\n     * The `_isCreated` property is immutable. It's remains true with the addresses of listings \n     * created by the validator,\n     *\n     * The `_active` property is mutable by the validators.\n     */\n    struct ListingStatusModel {\n        bool _isCreated;\n        bool _active;\n    }\n    mapping (address => ListingStatusModel) public listingStatus;\n\n    /**\n     * @dev Initial token distribution addresses according to whitepaper (page 11/24)\n     * https://anft.vn/assets/file/ANFTWhitepaperVer1.0.pdf\n     */\n    address public PLATFORM_DEVELOPMENT;\n    address public COMMUNITY;\n    address public REAL_ESTATE_SERVICE;\n    address public ETF;\n    address public REGULATION_FUNDS;\n\n    /**\n     * @dev Deployer has the default roles of DEFAULT_ADMIN_ROLE and VALIDATOR\n     * Staking address is set here\n     * \n     * Initial token distribution addresses are also set here since variables can't be initialized outsize \n     * {initialize} function\n     *\n     * After deployment, {DEFAULT_ADMIN_ROLE} address should be moved to an multisign address and\n     * the contract deployer shall renounce {DEFAULT_ADMIN_ROLE}\n     */\n\n    function initialize(address _stakingAddr) external initializer {\n        require(_stakingAddr != address(0), \"Token: Invalid _stakingAddr\");\n\n        __UUPSUpgradeable_init();\n        __AccessControl_init();\n        __ERC20_init(\"ANFT Token\", \"ANFT\");\n\n        uint256 totalSuppy = 1_232_000_000 * 10 ** decimals();\n\n        PLATFORM_DEVELOPMENT = 0xb3F5E20db0167d4A5B5C5DaAd6f1c76Cc40cC52D;\n        COMMUNITY = 0x6b3887eB6091cC705ffA6E32e22B5524b3A9BEa4;\n        REAL_ESTATE_SERVICE = 0x33aE0695fB3250F0788510B289d26309d4B8f939;\n        ETF = 0xf5d2f60663D83ABf28969F2A5F501178D8D64bAa;\n        REGULATION_FUNDS = 0x9F1660B7184Bde8b8973c6618AC3D7D306e8a796;\n\n        _mint(PLATFORM_DEVELOPMENT,  totalSuppy * 14 / 100);\n        _mint(COMMUNITY,  totalSuppy * 34 / 100);\n        _mint(REAL_ESTATE_SERVICE,  totalSuppy * 32 / 100);\n        _mint(ETF,  totalSuppy * 8 / 100);\n        _mint(REGULATION_FUNDS,  totalSuppy * 12 / 100);\n\n        stakingAddress = _stakingAddr;\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        override\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {}\n\n    /**\n     * @dev Handle transactions from listings and only from listings\n     * \n     * If `_in` is true, _amount will be transfered from `_userAddr` to `stakingAddress`\n     * Otherwise, `_amount` will be transfered from `stakingAddress` to `_userAddr`\n     *\n     * Returns true if the transation is success\n     *\n     * Emits a {Transfer} event from IERC20\n     */\n    function handleListingTx (address _userAddr, uint256 _amount, bool _in)  external onlyValidListing returns (bool) {\n        require(_userAddr != address(0), \"Token: Invalid _userAddr\");\n        address sender;\n        address recipient;\n        (sender, recipient) = _in ? (_userAddr, stakingAddress) : (stakingAddress, _userAddr);\n        bool success = super._transfer(sender, recipient, _amount);\n        require(success, \"Token: Unsuccessful transfer\");\n        return true;\n    }\n\n    /**\n     * @dev Create a new listing (the tokenized version of a real estate product)\n     * \n     * Restricted to only validators\n     *\n     * A newly created listing is set with two properties: `_isCreated` and `_active`\n     *\n     * Listing's validator is the validator address making the transaction. The validator must\n     * specify the address of listing's owner\n     * \n     * Emits a {ListingCreation} event\n     */\n    function createListing(address _owner, uint256 _listingId) external {\n        require(hasRole(VALIDATOR, _msgSender()), \"Token: Unauthorized\");\n        require(_owner != address(0), \"Token: Invalid _owner\");\n        Listing newListing = new Listing(_msgSender(), _owner, _listingId);\n        emit ListingCreation(_msgSender(), _owner, address(newListing));    \n        listingStatus[address(newListing)]._isCreated = true;    \n        listingStatus[address(newListing)]._active = true;    \n    }\n\n    /**\n     * @dev Toggle listing `_active` status. Shall be useful if there's a listing no longer in operation\n     *\n     * Restricted to only the validator of the listing or DEFAULT_ADMIN_ROLE\n     *\n     * The `_listingAddr` must be the address of a created listing\n     * \n     */\n    function toggleListingStatus (address _listingAddr) external {\n        require(listingStatus[_listingAddr]._isCreated, \"Token: Invalid Listing\");\n        address listingValidator = Listing(_listingAddr).validator();\n        require(listingValidator == _msgSender() || hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Token: Unauthorized\");\n        listingStatus[_listingAddr]._active = !listingStatus[_listingAddr]._active;\n    }\n\n    /**\n     * @dev Update the funds address. Shall be handy if there's a need in changing the initial address,\n     * or the previous address is compromised.\n     */    \n    function updateStakingAddress (address _stakingAddr) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Token: Unauthorized\");\n        require(_stakingAddr != address(0), \"Token: Invalid _stakingAddr\");\n        stakingAddress = _stakingAddr;\n        emit UpdateStakingAddr(_stakingAddr);\n    }\n\n    /**\n     * @dev In case a validator's key is compromised, {DEFAULT_ADMIN_ROLE} \n     * is able to update listing's validator\n     */    \n    function emergencyUpdateListingValidator (address _listingAddr, address _newValidator) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Token: Unauthorized\");\n        require(listingStatus[_listingAddr]._isCreated, \"Token: Invalid Listing\");\n        Listing(_listingAddr).updateValidator(_newValidator);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from the authorized caller's balance\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) external onlyRole(BURNER) {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Mints `amount` tokens for the authorized caller's balance\n     *\n     * See {ERC20-_mint}.\n     */\n\n    function mint(address to, uint256 amount) external onlyRole(MINTER) {\n        _mint(to, amount);\n    }\n\n    /**\n     * @notice The below functions are to trigger listing events.\n     * Important {Listing} events can be \"listened\" centrally inside this {Token} contract.\n     * Clients can subscribe to every event in {Listing} contracts in this {Token} contract.\n     * (Originally events are emitted from separated {Listing} contracts, but that would be impossible \n     * for clients to subscribe for every change from different listings)\n     */    \n    function triggerUpdateListingValueEvent(uint _value) external onlyValidListing {\n        emit UpdateValue(_msgSender(), _value);\n    }\n\n    function triggerUpdatePaymentEvent(uint _payment) external onlyValidListing {\n        emit UpdateDailyPayment(_msgSender(), _payment);\n    }\n\n    function triggerUpdateWorkerEvent(address _worker, bool _isAuthorized) external onlyValidListing {\n        emit UpdateWorker(_msgSender(), _worker, _isAuthorized);\n    }\n\n    function triggerOwnershipExtensionEvent(address _prevOwner, address _newOwner, uint256 _start, uint256 _end, uint256 _amount) external onlyValidListing {\n        emit OwnershipExtension(_msgSender(), _prevOwner, _newOwner, _start, _end, _amount);\n    }\n\n    function triggerWithdrawEvent(address _owner, uint256 _amount, uint256 _initOwnership, uint256 _newOwnership) external onlyValidListing {\n        emit Withdraw(_msgSender(), _owner, _amount, _initOwnership, _newOwnership);\n    }\n\n    function triggerClaimEvent(address _stakeholder, uint256 _reward, uint256 _from, uint256 _to) external onlyValidListing {\n        emit Claim(_msgSender(), _stakeholder, _reward, _from, _to);\n    }\n\n    function triggerRegisterEvent(address _stakeholder, uint256 _amount, uint256 _optionId) external onlyValidListing {\n        emit Register(_msgSender(), _stakeholder, _amount, _optionId);\n    }\n\n    function triggerUnregisterEvent(address _stakeholder, uint256 _optionId) external onlyValidListing {\n        emit Unregister(_msgSender(), _stakeholder, _optionId);\n    }\n\n    function triggerUpdateOptionRewardEvent(uint256 _optionId, uint256 _reward) external onlyValidListing {\n        emit UpdateOptionReward(_msgSender(), _optionId, _reward);\n    }\n\n    function triggerUpdateListingIdEvent(uint256 _prevId, uint256 _newId) external onlyValidListing {\n        emit UpdateListingId(_msgSender(), _prevId, _newId);\n    }\n\n    function triggerUpdateOwnerEvent(address _prevOwner, address _newOwner) external onlyValidListing {\n        emit UpdateOwner(_msgSender(), _prevOwner, _newOwner);\n    }\n\n    function triggerUpdateValidatorEvent(address _prevValidator, address _newValidator) external onlyValidListing {\n        emit UpdateValidator(_msgSender(), _prevValidator, _newValidator);\n    }\n\n     /**\n     * @dev Modifier, making sure the listing caller is a valid listing\n     */\n    modifier onlyValidListing() {\n        require(listingStatus[_msgSender()]._isCreated, \"Token: Invalid Listing\");\n        require(listingStatus[_msgSender()]._active, \"Token: Inactive Listing\");\n        _;\n    }\n\n\n    /**\n     * @dev Emitted a new Listing is created. `_validator` should be the caller, \n     * `_owner` should be the specified address and `_listingAddress` is the\n     * newly created listing address\n     */\n    event ListingCreation(address _validator, address _owner, address _listingAddress);\n\n    /**\n     * @dev Emitted when the staking address is updated, `_stakingAddr` should be the new address \n     */\n    event UpdateStakingAddr(address _stakingAddr);\n\n    /**\n     * @notice Below are events triggered from individual listing contract. These events are off-loaded from\n     * separated contracts to this token contract, so that we can \"listen\" to listing events in a centralized place\n     */\n    \n    /**\n     * @dev Emitted when the worker status of a listing is updated.\n     *\n     * `_worker` is the updated address, `_isAuthorized` is the new status\n     */\n    event UpdateWorker(address _listing, address _worker, bool _isAuthorized);\n\n    /**\n     * @dev Emitted when the validator update listing's value\n     *\n     * `_value` is the new listing value\n     */\n    event UpdateValue (address _listing, uint256 _value);\n\n    /**\n     * @dev Emitted when the validator update listing's daily payment\n     *\n     * `_payment` is the previous listing daily payment\n     */\n    event UpdateDailyPayment (address _listing, uint256 _payment);\n\n    /**\n     * @dev Emitted when the owner extends ownership with a listing\n     *\n     * `_prevOwner` is the previous owner address\n     * `_newOwner` is the new owner address\n     * `_start` is the existing ownership\n     * `_end` is when the ownership ends\n     * `_amount` is the transfered amount\n     */\n    event OwnershipExtension (address _listing, address _prevOwner, address _newOwner, uint256 _start, uint256 _end, uint256 _amount);\n\n    /**\n     * @dev Emitted when the owner withdraws tokens (forfeit ownership for a listing)\n     *\n     * `owner` is the owner withdrawing\n     * `_amount` is the amount to return to the owner\n     * `_initOwnership` is the initial ownership value\n     * `_newOwnership` is the updated ownership value\n     */\n    event Withdraw (address _listing, address owner, uint256 _amount, uint256 _initOwnership, uint256 _newOwnership);\n\n    /** @dev Emitted when an user claiming rewards\n     *\n     * `_stakeholder` is the stakeholder \n     * `_reward` is the reward amount\n     * `_from` -> `_to` is the staking period of time\n     */\n    event Claim(address _listing, address _stakeholder, uint256 _reward, uint256 _from, uint256 _to);\n\n    /** @dev Emitted when an user registers for claiming rewards\n     *\n     * `_stakeholder` is the stakeholder \n     * `_amount` is the registered amount\n     * `_optionId` is the chosen option\n     */\n    event Register(address _listing, address _stakeholder, uint256 _amount, uint256 _optionId);\n\n    /** @dev Emitted when an user unregisters for claiming rewards\n     *\n     * `_stakeholder` is the stakeholder \n     * `_optionId` is the unregistered option\n     */\n    event Unregister(address _listing, address _stakeholder, uint256 _optionId);\n\n    /** @dev Emitted when a listing's validator update option reward\n     *\n     * `_optionId` is the updated option\n     * `_reward` is the reward value\n     */\n    event UpdateOptionReward(address _listing, uint256 _optionId, uint256 _reward);\n    \n    /** @dev Emitted when a listing's validator update listing's ID\n     *\n     * `_prevId` is the previous id\n     * `_newId` is the new id\n     */\n    event UpdateListingId(address _listing, uint256 _prevId, uint256 _newId);\n\n    /** @dev Emitted when a listing's validator update listing's owner\n     *\n     * `_prevOwner` is the previous owner\n     * `_newOwner` is the new owner\n     */\n    event UpdateOwner(address _listing, address _prevOwner, address _newOwner);\n\n    /** @dev Emitted when a listing's validator is updated\n     *\n     * `_prevValidator` is the previous validator\n     * `_newValidator` is the new validator\n     */\n    event UpdateValidator(address _listing, address _prevValidator, address _newValidator);\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal initializer {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/v1/Listing.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./Token.sol\";\n\n/**\n * @dev This contract represents a real estate product.\n */\ncontract Listing {\n\n    using SafeMath for uint;\n\n    /**\n     * @dev Owner is the address pays tokens to take/extend the ownership for a listing\n     */\n    address public owner;\n\n    /**\n     * @dev Listing ID is to bind the Listing NFT on the blockchain with the listing data in\n     * the real world\n     */\n    uint256 public listingId;\n\n    /**\n     * @dev Validator is the authorized account to update the listing configurations\n     */\n    address public validator;\n\n    /**\n     * @dev Token contract should be the address of {Token} contract which creates this listing\n     */\n    address public immutable tokenContract;\n\n    /**\n     * @dev Ownership value is the unix timestamp, determinating if the listing is forfeited by the owner\n     * (ownership < block.timestamp) and ready to be taken by another owner user.\n     */\n    uint256 public ownership;\n\n    /**\n     * @dev The market value of the listing in real world\n     */\n    uint256 public value;\n\n    /**\n     * @dev Daily payment is the amount of token the owner has to pay daily to maintain ownership\n     * Daily payment determines how long the owner has the ownership over the listing with the tokens they pay.\n     */\n    uint256 public dailyPayment;\n\n    /**\n     * @dev Workers are addresses authorized by the owner to use the listing in the real world\n     */\n    mapping (address => bool) public workers;\n\n    /**\n     * @dev Options are business activities in real world. Each options has a rewards percentage (sum up to 100);\n     * Reward value for each option is set by the validator. \n     *\n     * `_isSet` flag is default to false, until the option is set by the validator\n     * This flag is to prevent users from participating in the activities which arent set up by the validator.\n     *\n     * Everytime an user register/unregisters for an activity, the `_totalStake` is increased/decreased respectively\n     */\n    struct OptionModel {\n        uint256 _totalStake;\n        uint256 _reward;\n        bool _isSet;\n    }\n    mapping (uint => OptionModel) public options;\n\n    /**\n     * @dev Option reward value (percentage) is set up by and only by the validator\n     * Reward should not exceed 100;\n     * The sum of reward values from all options should be 100;\n     * \n     * `isSet` is toggled to true for options which were setup\n     *\n     * For example A, B, C, D are options. Ar, Br, Cr, Dr are the reward values respectively\n     */\n    function setupOptionReward (uint256 _optionId, uint256 _reward) external onlyValidator {\n        require(_reward <= 100, \"Listing: Invalid reward value\");\n        options[_optionId]._reward = _reward;\n        options[_optionId]._isSet = true;\n        Token(tokenContract).triggerUpdateOptionRewardEvent(_optionId, _reward);\n    }   \n\n    /**\n     * @dev Validator can update the listing ID\n     */\n    function updatelistingId (uint256 _listingId) external onlyValidator {\n        Token(tokenContract).triggerUpdateListingIdEvent(listingId, _listingId);\n        listingId = _listingId;\n    }\n\n    /**\n     * @dev Validator can update the owner value\n     * Owner value can only changeable if the current owner has forfeited the listing\n     */\n    function updateOwner (address _newOwner) external onlyValidator {\n        require(ownership - 86400 <  block.timestamp, \"Owner hasn't forfeited!\");\n        require(_newOwner != address(0), \"Listing: Invalid _newOwner\");\n        Token(tokenContract).triggerUpdateOwnerEvent(owner, _newOwner);\n        owner = _newOwner;\n    }\n    \n    /**\n     * @dev Validator can update themselves\n     *\n     * In case the validator's key is compromised, the {tokenContract} can call the\n     * {emergencyUpdateListingValidator} function (restricted to {DEFAULT_ADMIN_ROLE}) to invoke this {updateValidator} function\n     * and update the listing's validator\n     */\n    function updateValidator (address _validator) external {\n        require(msg.sender == validator || msg.sender == tokenContract, \"Listing: Unauth!\");\n        require(_validator != address(0), \"Listing: Invalid _validator\");\n        Token(tokenContract).triggerUpdateValidatorEvent(validator, _validator);\n        validator = _validator;\n    }\n    \n    /**\n    * @dev Stake info is recorded every time an user registers for staking and updated when they update their previous staking\n    *\n    * Stakings are recorded by the option (or business activity) ID, combined with user's address\n    * A JSON represenation of a staking record:\n    {\n        \"1\": {\n            \"0x000001\": {\n                \"_start\": 1650347256,\n                \"_amount\": 100,\n                \"_active\": true\n            }\n        }\n    }\n    * This could be understood as: Address `0x000001` staking for the option with ID = 1. The stake starts at\n    * the timestamp of 1650347256 with the registered amount of 100 tokens. The stake is still active (user hasnt canceled)\n    */\n    struct StakingModel {\n        uint256 _start;\n        uint256 _amount;\n        bool _active;\n    }\n    mapping (uint256 => mapping (address => StakingModel)) public stakings;\n\n\n    /**\n    * @dev Total stake represents the tokens are staked for all options\n    * \n    * TotalStake is:\n    *   - Increased when user stake (register) for any option\n    *   - Decreased when user unstake (unregister) for any option\n    */\n    uint256 public totalStake;\n\n    /**\n    * @dev Owner and validator is configed upon listing creation according to the specified arguments\n    * \n    * Ownership value is initialized to be the current block.timestamp\n    *\n    * Token contract should be the Caller/Listing creator address\n    */\n    constructor(address _validator, address _owner, uint256 _listingId) {\n        owner = _owner;\n        validator = _validator;\n        listingId = _listingId;\n        ownership = block.timestamp;\n        tokenContract = msg.sender;\n    }\n    /**\n     * @dev Validator can update the listing value to reflect the real estate price in the real world\n     * Emits an {UpdateValue} event to make the changes publicly visible\n     */\n    function updateValue (uint256 _value) external onlyValidator {\n        value = _value;\n        Token(tokenContract).triggerUpdateListingValueEvent(_value);\n    }\n\n    /**\n     * @dev Validator can update the daily payment value to reflect the real estate price in the real world\n     * Emits an {UpdateDailyPayment} event to make the changes publicly visible\n     */\n    function updateDailyPayment (uint256 _dailyPayment) external onlyValidator {\n        dailyPayment = _dailyPayment;\n        Token(tokenContract).triggerUpdatePaymentEvent(_dailyPayment);\n    }\n\n    /**\n     * @dev Owner can update worker status. Which means they can choose/remove who\n     * can use the listing in real world\n     */\n    function updateWorker(address _worker) external {\n        require(msg.sender == owner, \"Listing: Unauth!\");\n        require(ownership >= block.timestamp, \"Listing: Ownership expired\");\n        workers[_worker] = !workers[_worker];\n        Token(tokenContract).triggerUpdateWorkerEvent(_worker, workers[_worker]);\n    }\n\n    /**\n    * @dev Owner can extend ownership by transfering tokens to the staking address\n    * \n    * Definition: A listing is forfeited if {ownership - 86400 <  block.timestamp} (24 hours before the ownership actually expires)\n    * Sender can extend the ownership for the listing in the following cases:\n    * Case 1: If the listing isn't forfeited, sender must be the current owner\n    * Case 2: If the listing is forfeited, sender could be anyone. Sender would become the new owner;\n    *\n    * sender must transfer at least {dailyPayment} amount (Owns the listing for at least 1.0 day)\n    *\n    * Time credit formula:\n    *   C = (A  x 86400 / D)\n    *      C (timestamp): Time credit (Unix timestamp)\n    *      A (tokens): Transfered amount to extend ownership\n    *      D (tokens): Daily payment, specified by the validator\n    *      86400: Total seconds in a day (60*60*24)\n    *\n    * Then C is added on top of {block.timestamp} OR the current {ownership} value, depends on whether the listing is forfeited\n    */\n\n    function extendOwnership (uint256 _amount) external {\n        require(msg.sender == owner || ownership - 86400 <  block.timestamp, \"Listing: Unauth!\");\n        \n        require(_amount >= dailyPayment, \"Listing: Insufficient amount!\");\n\n        bool success = Token(tokenContract).handleListingTx(msg.sender, _amount, true);\n        require(success, \"Listing: Unsuccessful attempt!\");\n\n        uint256 existingOwnership = ownership;\n        address existingOwner = owner;\n        \n        if (existingOwnership - 86400 < block.timestamp) {\n            owner = msg.sender;\n            existingOwnership = block.timestamp;\n        }\n\n        ownership = existingOwnership.add(_amount.mul(86400).div(dailyPayment));\n        Token(tokenContract).triggerOwnershipExtensionEvent(existingOwner, owner, existingOwnership, ownership, _amount);\n    }\n\n    /**\n    * @dev Owner can partially withdraw the tokens they previously transfered to extend the listing ownership (and forfeit the ownership)\n    * \n    * Ownership value must be in the future (larger or equal to block.timestamp)\n    * \n    * Owner can input the amount of token they want to withdraw\n    *\n    * After withdrawal, owner still have to own the listing for at least 1.0 day more\n    * (hence the check {newOwnership >= block.timestamp.add(86400)} )\n    *\n    * Ownership withdraw formula:\n    *   RC = A * 86400 / D\n    *   OS2 = OS1 - RC\n    *      A  (tokens)    : Amount of tokens the owner wishes to withdraw\n    *      RC (timestamp) : Removed credit based on {_amount} input\n    *      OS1 (timestamp): Original/Intial ownership before withdrawal\n    *      OS2 (timestamp): New Ownership value after withdrawal\n    *      D  (tokens):  Daily payment, specified by the validator\n    *\n    * Owner still have to own the listing for one more day (`OS2` must be gte to block.timestamp + 86400)\n    *\n    * `_amount` shall be transfered from Funds account to user.\n    * If the transfer success, the ownership value should be set to current TS\n    */\n    function withdraw(uint256 _amount) external {\n        require(msg.sender == owner, \"Listing: Unauth!\");\n        require(ownership >= block.timestamp, \"Listing: Ownership expired!\");\n        require(_amount >= dailyPayment, \"Listing: Insufficient amount!\");\n\n        uint256 removedCreditTimestamp = _amount.mul(86400).div(dailyPayment);\n        uint256 newOwnership = ownership.sub(removedCreditTimestamp);\n\n        require(newOwnership >= block.timestamp.add(86400), \"Listing: Invalid amount!\");\n        \n        bool success = Token(tokenContract).handleListingTx(msg.sender, _amount, false);\n        require(success, \"Listing: Unsuccessful attempt!\");\n\n        Token(tokenContract).triggerWithdrawEvent(owner, _amount, ownership, newOwnership);\n        ownership = newOwnership;\n    }\n\n    /**\n    * @dev Stakeholders can claim their reward they previously registed\n    * \n    * See {calculateStakeholderReward} for the reward payout formula\n    *\n    * Staking status should be active (stakeholder hasnt unregistered)\n    * Users must have at least `_amount` tokens in their balance\n    *\n    * This function is automatically triggered when {register} or {unregister} functions are called \n    *\n    * If the transfer from the funds address to user's address fulfilled, an {Claim} event is emitted\n    * the stake start is reset to the current block.timestamp\n    */\n    function claimReward (uint256 _optionId) public {\n        StakingModel storage chosenStake = stakings[_optionId][msg.sender];\n        require(chosenStake._active, \"Listing: Register first!\");\n\n        uint256 callerBalance = Token(tokenContract).balanceOf(msg.sender);\n        require(callerBalance >= chosenStake._amount, \"Listing: Insufficient balance!\");\n\n        uint256 payoutAmount = calculateStakeholderReward(_optionId, chosenStake);\n        bool success = Token(tokenContract).handleListingTx(msg.sender, payoutAmount, false);\n        require(success, \"Listing: Unsuccessful attempt!\");\n\n        Token(tokenContract).triggerClaimEvent(msg.sender, payoutAmount, chosenStake._start, block.timestamp);\n\n        chosenStake._start = block.timestamp;\n    }\n\n    /**\n    * @dev User can register to be a stakeholder.\n    * \n    * NOTE The key difference of this staking model is the user's token balance isnt transfered\n    * to another staking address (like other staking models).\n    * Users, however, need to have at least registering amount in their balance WHEN they register AND claim rewards\n    *\n    * Users cant register for inactive listing\n    *\n    * `_amount` is the registering amount\n    * `_optionId` is the option which user would like to register\n    *\n    * New registering amount will replace previous registering amount\n    *\n    * Both listing total stake and option total stake is increased/decreased by the difference between\n    * previous registering amount and current registering amount\n    *\n    * In case stakeholders would like to update their registering amount, they are still rewarded\n    * for the period between previous and current registering timestamps\n    *\n    * Emits an {Register} event\n    */\n    function register (uint256 _amount, uint256 _optionId) external onlyActiveListing {\n        require(options[_optionId]._isSet, \"Listing: Option not available\");\n\n        StakingModel storage chosenStake = stakings[_optionId][msg.sender];\n        require(_amount != chosenStake._amount, \"Listing: Stake unchanged!\");\n\n        uint256 callerBalance = Token(tokenContract).balanceOf(msg.sender);\n        require(callerBalance >= _amount, \"Listing: Insufficient balance!\");\n\n        if (chosenStake._amount != 0) {\n            claimReward(_optionId);\n        }\n\n        bool stakeIncreased = _amount > chosenStake._amount;\n        uint256 difference = stakeIncreased ? _amount.sub(chosenStake._amount) : chosenStake._amount.sub(_amount);\n\n        if (stakeIncreased) {\n            chosenStake._amount = chosenStake._amount.add(difference);\n            options[_optionId]._totalStake = options[_optionId]._totalStake.add(difference);\n            totalStake = totalStake.add(difference);\n        } else {\n            chosenStake._amount = chosenStake._amount.sub(difference);\n            options[_optionId]._totalStake = options[_optionId]._totalStake.sub(difference);\n            totalStake = totalStake.sub(difference);\n        }\n\n        chosenStake._start = block.timestamp;\n        chosenStake._active = true;\n        Token(tokenContract).triggerRegisterEvent(msg.sender, _amount, _optionId);\n    }\n    /**\n    * @dev User can unregister their previous stake\n    * \n    * Staking status should be active (stakeholder hasnt unregistered)\n    *\n    * Users cant register for inactive listing\n    *\n    * Staking info is reset to initial status\n    *\n    * `_optionId` is the option which user would like to unregister\n    *\n    * Stakeholders are rewarded for the period between registering and unregistering timestamps\n    *\n    * Both listing total stake and option total stake is decreased by `_amount`\n    * Emits an {Unregister} event\n    */\n    function unregister(uint256 _optionId) external onlyActiveListing {\n        StakingModel storage chosenStake = stakings[_optionId][msg.sender];\n\n        require(chosenStake._active, \"Listing: Register first!\");\n\n        if (chosenStake._amount != 0) {\n            claimReward(_optionId);\n        }\n\n        options[_optionId]._totalStake = options[_optionId]._totalStake.sub(chosenStake._amount);\n\n        totalStake = totalStake.sub(chosenStake._amount);\n\n        chosenStake._amount = 0;\n        chosenStake._active = false;\n        chosenStake._start = 0;\n\n        Token(tokenContract).triggerUnregisterEvent(msg.sender, _optionId);\n    }\n\n    /**\n    * @dev Stakeholder reward formula\n    * \n    * T    = TS * 100 / LV\n    * RTd  = DA * T%\n    * Ar   = ((RTd * 100 / Ap) / At) * Ax\n    * Rm   = Ar * Sd\n\n    *   T(%)      : Percentage for total token rewarding (less or equal than 86)\n    *               If listing is forfeited, T is less or equal than 50\n    *   TS        : Total tokens staked for the listing\n    *   LV        : Listing value\n    *   RTd       : Total tokens for rewarding daily for ALL stakeholder (daily avaiable tokens for claiming)\n    *   DA        : Daily Payment\n    *   Ap(%)     : Reward percentage value for the chosen option\n    *   At(tokens): The total staked amount for an option from ALL stakeholders\n    *   Ax(tokens): The staked amount for an option from the calling stakeholder (msg.sender)\n    *   Ar(tokens): Available daily tokens for claiming for ONE stakeholder for one option\n    *   Sd(seconds): Staked time (difference in stake start and block.timestamp)\n    *   Rm(tokens): The reward for a stakeholder after a period of time\n    */\n    function calculateStakeholderReward (uint256 _optionId, StakingModel storage _userStake) private view returns (uint256) {\n        uint256 safeMultiplier = 10 ** 18;\n\n        uint256 T = totalStake.mul(safeMultiplier).div(value);\n\n        if (T > safeMultiplier.mul(86).div(100)) {\n            T = safeMultiplier.mul(86).div(100);\n        }\n\n        if (ownership < block.timestamp && T > safeMultiplier.mul(50).div(100)) {\n            T = safeMultiplier.mul(50).div(100);\n        }\n\n        uint256 RTd = dailyPayment.mul(T).div(safeMultiplier);\n\n        OptionModel memory optionInfo = options[_optionId];\n\n        uint256 Ar = (RTd.mul(optionInfo._reward).div(100)).mul(_userStake._amount).div(optionInfo._totalStake);\n\n        uint256 Sd = block.timestamp.sub(_userStake._start);\n\n        return (Ar.mul(Sd)).div(86400);\n        \n    }\n\n    /**\n     * @dev Modifier, making sure the current listing is active to proceed further logic\n     */\n    modifier onlyActiveListing() {\n        (, bool _active) = Token(tokenContract).listingStatus(address(this));\n\n        require(_active, \"Listing: Inactive listing!\");\n        _;\n    }\n\n    /**\n     * @dev Modifier, restricting access to only the validator\n     */\n    modifier onlyValidator() {\n        require(msg.sender == validator, \"Listing: Unauth!\");\n        _;\n    }\n\n}"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal initializer {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            _functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/v1/TestUpgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./Token.sol\";\n\ncontract TestUpgrade is Token {\n    uint256 private version;\n\n    function getVersion () external view returns (uint256)  {\n        return version;\n    }\n\n    function setVersion (uint256 _ver) external {\n        version = _ver;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}